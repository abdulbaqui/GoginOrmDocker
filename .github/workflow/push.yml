name: Go Code Check & Build
on:
  push:
    branches: [ main, develop, 'feature/**', 'feat/**', 'bugfix/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop, 'feature/**', 'feat/**', 'bugfix/**', 'hotfix/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run linter
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run tests
        run: go test -v ./...

      - name: Check for security vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Build application
        run: go build -o main .

      - name: Check if build was successful
        run: |
          if [ -f "main" ]; then
            echo "‚úÖ Build successful!"
            ls -la main
          else
            echo "‚ùå Build failed!"
            exit 1
          fi

      - name: Clean up
        run: rm -f main

  docker-check:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Dockerfile syntax
        run: |
          echo "Checking Dockerfile syntax..."
          docker build --dry-run -f dockerfile .

      - name: Check docker-compose syntax
        run: |
          echo "Checking docker-compose.yaml syntax..."
          docker-compose config

      - name: Success message
        run: echo "üéâ All code checks passed successfully!"